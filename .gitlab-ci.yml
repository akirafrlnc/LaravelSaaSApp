image: php:8.2-fpm

stages:
  - build
  - test
  - deploy

services:
  - name: postgres:16
    alias: db
    variables:
      POSTGRES_USER: akira
      POSTGRES_PASSWORD: root
      POSTGRES_DB: saas_app
  - name: redis:alpine
    alias: redis

variables:
  APP_ENV: testing
  DB_CONNECTION: pgsql
  DB_HOST: db
  DB_PORT: 5432
  DB_DATABASE: saas_app
  DB_USERNAME: akira
  DB_PASSWORD: root
  REDIS_HOST: redis
  PGPASSWORD: root  # Ensure PostgreSQL authentication without prompt

before_script:
  - apt-get update && apt-get install -y unzip git curl libpq-dev postgresql-client
  - docker-php-ext-install pdo pdo_pgsql
  - curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer
  - composer install --no-interaction --prefer-dist
  - cp .env.example .env
  - php artisan key:generate

  # Debugging: Check running services
  - echo "🔍 Checking available services..."
  - cat /etc/hosts  # List hostnames to check if 'db' exists
  - ping -c 3 db || true  # Test if 'db' is resolving

  # Wait for PostgreSQL to be ready
  - echo "⏳ Waiting for PostgreSQL..."
  - until psql -h "db" -U "$DB_USERNAME" -d "$DB_DATABASE" -c '\q' 2>/dev/null; do
      echo "⏳ Still waiting for PostgreSQL...";
      sleep 3;
    done
  - echo "✅ PostgreSQL is available!"

build:
  stage: build
  script:
    - echo "🔨 Building Laravel application..."
    - composer install --no-dev --no-interaction --prefer-dist
  artifacts:
    paths:
      - vendor/

test:
  stage: test
  script:
    - mkdir -p storage/logs  # Ensure directory exists
    - touch storage/logs/phpunit.xml  # Create empty file if necessary
    - php artisan config:cache
    - php artisan migrate --force
    - ./vendor/bin/pest --log-junit storage/logs/phpunit.xml
  artifacts:
    when: always
    reports:
      junit: storage/logs/phpunit.xml


deploy:
  stage: deploy
  script:
    - echo "🚀 Skipping deployment for now..."
  only:
    - main
