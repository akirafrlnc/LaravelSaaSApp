image: php:8.2-fpm

stages:
  - build
  - test
  - deploy

services:
  - name: postgres:16
    alias: db
  - name: redis:alpine
    alias: redis

variables:
  APP_ENV: testing
  DB_CONNECTION: pgsql
  DB_HOST: db
  DB_PORT: 5432
  DB_DATABASE: saas_app
  DB_USERNAME: akira
  DB_PASSWORD: root
  REDIS_HOST: redis
  PGPASSWORD: root  # Ensure PostgreSQL authentication without prompt

before_script:
  - apt-get update && apt-get install -y unzip git curl libpq-dev postgresql-client
  - docker-php-ext-install pdo pdo_pgsql
  - curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer
  - composer install --no-interaction --prefer-dist
  - cp .env.example .env
  - php artisan key:generate
  # Debug: List running services to check if "db" exists
  - echo "üîç Checking running services..."
  - docker ps -a || true  # GitLab CI doesn't run full Docker, but let's try
  - echo "Waiting for PostgreSQL service to be ready..."
  - until psql -h "db" -U "$DB_USERNAME" -d "$DB_DATABASE" -c '\q' 2>/dev/null; do
      echo "‚è≥ Waiting for PostgreSQL...";
      sleep 3;
    done
  - echo "‚úÖ PostgreSQL is available!"

build:
  stage: build
  script:
    - echo "Building Laravel application..."
    - composer install --no-dev --no-interaction --prefer-dist
  artifacts:
    paths:
      - vendor/

test:
  stage: test
  script:
    - echo "Running Laravel tests..."
    - php artisan config:cache
    - php artisan migrate --force
    - vendor/bin/phpunit --testdox
  artifacts:
    when: always
    reports:
      junit: storage/logs/phpunit.xml

deploy:
  stage: deploy
  script:
    - echo "Skipping deployment for now..."
  only:
    - main
